// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:bbfluttermodule/page/ensure_money/models/ensure_list_item_bean_entity.dart';
import 'package:bbfluttermodule/generated/json/ensure_list_item_bean_entity_helper.dart';
import 'package:bbfluttermodule/page/ensure_money/models/ensure_top_info_bean_entity_entity.dart';
import 'package:bbfluttermodule/generated/json/ensure_top_info_bean_entity_entity_helper.dart';
import 'package:bbfluttermodule/page/ensure_money/models/ensure_moeny_model_entity.dart';
import 'package:bbfluttermodule/generated/json/ensure_moeny_model_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case EnsureListItemBeanEntity:
			return ensureListItemBeanEntityFromJson(data as EnsureListItemBeanEntity, json) as T;			case EnsureListItemBeanList:
			return ensureListItemBeanListFromJson(data as EnsureListItemBeanList, json) as T;			case EnsureTopInfoBeanEntityEntity:
			return ensureTopInfoBeanEntityEntityFromJson(data as EnsureTopInfoBeanEntityEntity, json) as T;			case EnsureMoneyModelEntity:
			return ensureMoneyModelEntityFromJson(data as EnsureMoneyModelEntity, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case EnsureListItemBeanEntity:
			return ensureListItemBeanEntityToJson(data as EnsureListItemBeanEntity);			case EnsureListItemBeanList:
			return ensureListItemBeanListToJson(data as EnsureListItemBeanList);			case EnsureTopInfoBeanEntityEntity:
			return ensureTopInfoBeanEntityEntityToJson(data as EnsureTopInfoBeanEntityEntity);			case EnsureMoneyModelEntity:
			return ensureMoneyModelEntityToJson(data as EnsureMoneyModelEntity);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'EnsureListItemBeanEntity':
			return EnsureListItemBeanEntity().fromJson(json);			case 'EnsureListItemBeanList':
			return EnsureListItemBeanList().fromJson(json);			case 'EnsureTopInfoBeanEntityEntity':
			return EnsureTopInfoBeanEntityEntity().fromJson(json);			case 'EnsureMoneyModelEntity':
			return EnsureMoneyModelEntity().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'EnsureListItemBeanEntity':
			return List<EnsureListItemBeanEntity>();			case 'EnsureListItemBeanList':
			return List<EnsureListItemBeanList>();			case 'EnsureTopInfoBeanEntityEntity':
			return List<EnsureTopInfoBeanEntityEntity>();			case 'EnsureMoneyModelEntity':
			return List<EnsureMoneyModelEntity>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}